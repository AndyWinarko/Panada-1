
Panada
Light and simple PHP 5 base Framework.
Version 0.3.RC1
April 2011
Website: http://panadaframework.com
Twitter: http://twitter.com/panadaframework
Copyright (C) 2011  Iskandar Soesman (iskandarsoesman at gmaildotcom)
License: http://www.opensource.org/licenses/bsd-license.php

TENTANG PANADA
==============

Panada adalah framework sederhana dan simpel untuk pembuatan website berbasiskan
PHP 5. Panada dikembangkan dengan tujuan membantu para pengembang website untuk
bekerja lebih cepat, lebih mudah dan lebih alamiah dalam penulisan kode. Setiap
komponen akan bisa saling memanfaatkan sumberdaya (resource) dari komponen-komponen
lainnya secara otomatis. Hal ini memudahkan Anda dalam memanfaatkan sumberdaya
secara cepat dan efisien.

FEATURES
========

*   Sederhana dan Simpel
    Sistem utama (core system) Panada hanya terdiri dari sebuah file, yaitu gear.php
    yang terletak pada direktori panada/gear.php. Hal ini bertujuan memudahkan
    pengguna dalam memahami alur kerja Panada.

*   Mudah
    Dengan hanya sedikit mengisikan beberapa parameter pada file apps/config.php
    Panada sudah bisa langsung digunakan.

*   Single Load
    Cukup sekali melakukan pengambilan komponen (component load) dan sumberdayanya
    bisa langsung digunakan di semua komponen lainnya. Pengambilan bisa dilakukan
    pada bagian autoloader, di dalam controller, di dalam model atau di dalam library.

*   Alamiah
    Dalam pengambilan sebuah komponen baik itu model ataupun library, Anda hanya
    cukup melakukan sekali pendeklarasian sebagaimana umumnya dalam mendeklarasikan
    sebuah class, yaitu $this->nama_instance = new Library_nama(); atau $this->nama_instance = new Model_nama();.
    Baik dalam pengambilan library ataupun model cara yang dilakukan adalah sama.
    Perbedaaanya hanya terletak pada prefix ('Library_' atau 'Model_') nama class
    yang menunjukan tugas dan lokasi folder.
    
*   Multisite
    Beberapa website bisa dibuat dengan menggunakan satu sistem utama yang sama, baik itu
    dengan domain utama yang sama ataupun berbeda.

DOKUMENTASI OFFLINE
===================
Dokumentasi dapat Anda lihat secara offline di
http://localhost/panada/documentation/id/index.html

PANDUAN INSTALLASI DAN PENGGUNAAN
=================================

Download source file di:
http://github.com/k4ndar/Panada

Exctract file dan copy-kan ke dalam webserver.

-----------
Konfigurasi
-----------

File konfigurasi terletak di:
aps/config.php

Isikan lokasi url applikasi pada parameter base_url,
Misalnya http://localhost/panada/index.php/ atau http://www.mysite.com/index.php/

Jika tidak ingin menampilkan 'index.php', isikan string kosong('')
pada parameter index_file di dalam file config.php.
Konfigurasi juga harus dilakukan pada sisi webserver. Untuk webserver
Apache tambahkan file .htaccess di root applikasi yang isinya:

<IfModule mod_rewrite.c>
RewriteEngine on
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 [L]
</IfModule>

Untuk webserver Nginx, gunakan konfigurasi berikut:

location / {

    root /www/var/your_site;
    index  index.php index.html index.htm;

    if ($request_filename !~ (guide|js|css|images|robots\.txt.*) ) {
        rewrite ^/(.*)$ /index.php/$1 last;
    }
}

location ~ /index.php/ {
    fastcgi_pass   127.0.0.1:9000;
    fastcgi_index  index.php;
    fastcgi_param  SCRIPT_FILENAME  /www/var/your_site/index.php;
    include fastcgi_params;
}

Catatan: Jika Anda menggunakan Nginx, konfigurasi di atas harus dilakukan.
Jika tidak, applikasi tidak akan ter-routing dengan benar.

Kemudian jika applikasi Anda menggunakan database lengkapi parameter username,
host, password, dan nama database.

----------
Controller
----------

Untuk membuat controller buat sebuah file baru di dalam folder apps/controller/
dan beri nama sesuai dengan yang diinginkan, misalnya home.php.

Buat sebuah class baru di dalam file ini di mana class tersebut menjadi child
dari class Panada, berikut adalah contohnya:

class Controller_home extends Panada {
    
    function __construct(){
        
        parent::__construct();
    }
    
    function index(){
        
        echo 'Ini adalah controller home.';
    }
}

Yang harus diperhatikan adalah prefix nama class menunjukan lokasi folder class
tersebut. Hal ini juga berlaku pada class untuk library, maka prefix-nya adalah "Library_"
dan class untuk model dengan prefix "Model_"

Sebuah controller setidak-tidaknya harus memiliki method __construct dan index. Jika controller
ini dikases tanpa argumen apapun, maka method yang akan diakses adalah index.

Untuk me-load library ataupun model di dalam controller, berikut adalah contohnya:

class Controller_home extends Panada {
    
    function __construct(){
        
        parent::__construct();
        
        // Load model
        $this->users = new Model_users();
        // Load library
        $this->session = new Library_session();
    }
    
    function index(){
        
        print_r( $this->users->users() );
    }
}

-----
Model
-----

Buat file baru dan letakan di dalam folder apps/model/, misalnya users.php.
Buat class users di dalam file ini dengan diawali prefix "Model_", contohnya:

class Model_users {
    
    function __construct(){
        
    }
}

Load Library di dalam Model

Yang paling sering dilakukan adalah me-load library database di dalam sebuah class model. Untuk
melakukan ini berikut adalah contohnya:

class Model_users {
    
    function __construct(){
        
        $this->db = new Library_db();
    }
}

berikutnya, properti "$this->db" bisa digunakan di semua method yang ada di dalam class
tersebut. Berikut adalah contoh untuk mendapatkan 5 record dari database:

class Model_users {
    
    function __construct(){
        
        $this->db = new Library_db();
    }
    
    function users(){
        
        $result = $this->db->results("SELECT * FROM table_name ORDER BY id LIMIT 5");
    }
}

NOTE: Selain dengan cara ini, ada dua cara lainnya untuk me-load class baik itu library
ataupun model:

1.  Defenisikan class yang akan diload secara otomatis pada parameter auto_loader yang ada di dalam file
    config.php, contohnya adalah:
    
    $CONFIG['auto_loader'] = array('Library_db', 'Model_users');
    
    Library ataupun model bisa sekaligus dideklarasikan secara bersamaan.
    
2.  Sebuah class juga bisa dideklarasikan pada method constructor dari class controller. Misalnya
    me-load library db di dalam controller home:
    
    class Controller_home extends Panada {
    
        function __construct(){
            
            parent::__construct();
            
            $this->db = new Library_db();
            $this->users = new Model_users();
        }
        
        function index(){
            
            echo 'Ini adalah controller home.';
        }
    }
    
Apabila sebuah class sudah dideklarasikan, baik itu pada auto_loader
atau di dalam model ataupun di dalam controller, maka tidak perlu lagi dideklarasikan pada class lainnya.
instance dari class tersebut secara otomatis sudah bisa langsung digunakan pada class lain.


KONTRIBUSI
==========

Anda bisa melakukan banyak hal untuk berkontribusi, diantaranya:

*   Tester Contributor
    Install dan test Panada pada komputer Anda dan informasikan bug ataupun apa saja yang Anda alami
    ketika menggunakan applikasi ini. Kirimkan info Anda ke k4ndar at yahoodotcom (akan lebih bagus jika dilengkapi screenshoot).
    
*   Petch Contributor
    Ingin memperbaiki bug yang Anda temukan? atau memperbaiki algoritma sehingga membuat Panada
    menjadi lebih baik? Fork source code Panada di http://github.com/k4ndar/Panada
    
*   Library Contributor
    Cara yang sama juga bisa Anda gunakan untuk men-submit library buatan Anda.
    
*   Other Contributor
    Apapun bisa Anda melakukan apapun untuk menjadikan Panada lebih baik dengan cara Anda sendiri.
    Selamat menikmati Panada!


KONTRIBUTOR
===========

Berikut adalah teman-teman yang sudah berkontribusi pada project ini:
* b_dtri (http://twitter.com/mboi_coy)
* Enggal Mandiri (http://enggalmandiri.info/)
* cakyus (http://cakyus.wordpress.com/)